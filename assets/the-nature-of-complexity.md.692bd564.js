import{_ as e,c as s,o as a,a as t}from"./app.aa76e8ed.js";const n="/a-philosophy-of-software-design/assets/00010.6e3fb93e.jpeg",y=JSON.parse('{"title":"\u7B2C\u4E8C\u7AE0 \u590D\u6742\u5EA6\u7684\u672C\u8D28","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 \u590D\u6742\u5EA6\u7684\u5B9A\u4E49","slug":"_2-1-\u590D\u6742\u5EA6\u7684\u5B9A\u4E49"},{"level":2,"title":"2.2 \u590D\u6742\u5EA6\u8868\u5F81","slug":"_2-2-\u590D\u6742\u5EA6\u8868\u5F81"},{"level":2,"title":"2.3 Causes of complexity","slug":"_2-3-causes-of-complexity"},{"level":2,"title":"2.4 Complexity is incremental","slug":"_2-4-complexity-is-incremental"},{"level":2,"title":"2.5 Conclusion","slug":"_2-5-conclusion"}],"relativePath":"the-nature-of-complexity.md","lastUpdated":1661434746000}'),i={name:"the-nature-of-complexity.md"},o=t('<h1 id="\u7B2C\u4E8C\u7AE0-\u590D\u6742\u5EA6\u7684\u672C\u8D28" tabindex="-1">\u7B2C\u4E8C\u7AE0 \u590D\u6742\u5EA6\u7684\u672C\u8D28 <a class="header-anchor" href="#\u7B2C\u4E8C\u7AE0-\u590D\u6742\u5EA6\u7684\u672C\u8D28" aria-hidden="true">#</a></h1><p>\u8FD9\u672C\u4E66\u662F\u5173\u4E8E\u5982\u4F55\u8BBE\u8BA1\u8F6F\u4EF6\u7CFB\u7EDF\u5E76\u5C3D\u53EF\u80FD\u964D\u4F4E\u5176\u590D\u6742\u5EA6\u3002\u7B2C\u4E00\u6B65\u662F\u53BB\u4E86\u89E3\u654C\u4EBA\u3002\u7A76\u7ADF\u4EC0\u4E48\u662F\u201C\u590D\u6742\u5EA6\u201D\uFF1F\u5982\u4F55\u5224\u65AD\u4E00\u4E2A\u7CFB\u7EDF\u662F\u5426\u4E0D\u5FC5\u8981\u7684\u590D\u6742\uFF1F\u4EC0\u4E48\u5BFC\u81F4\u7CFB\u7EDF\u53D8\u5F97\u590D\u6742\uFF1F\u672C\u7AE0\u5C06\u5728\u8F83\u9AD8\u5C42\u6B21\u4E0A\u8BA8\u8BBA\u8FD9\u4E9B\u95EE\u9898\uFF1B\u540E\u7EED\u7AE0\u8282\u5C06\u5C55\u793A\u5982\u4F55\u5728\u8F83\u4F4E\u5C42\u6B21\u4E0A\u6839\u636E\u7279\u5B9A\u7684\u7ED3\u6784\u7279\u5F81\u6765\u8BC6\u522B\u590D\u6742\u5EA6\u3002</p><p>\u8BC6\u522B\u590D\u6742\u5EA6\u7684\u80FD\u529B\u662F\u4E00\u9879\u6781\u4E3A\u91CD\u8981\u7684\u8BBE\u8BA1\u6280\u80FD\u3002\u5B83\u53EF\u4EE5\u8BA9\u4F60\u5728\u6295\u5165\u5927\u91CF\u5DE5\u4F5C\u91CF\u4E4B\u524D\u8BC6\u522B\u95EE\u9898\uFF0C\u5E76\u4F7F\u4F60\u53EF\u4EE5\u5728\u66FF\u4EE3\u65B9\u6848\u4E2D\u505A\u51FA\u597D\u7684\u9009\u62E9\u3002\u5224\u65AD\u4E00\u4E2A\u8BBE\u8BA1\u662F\u5426\u7B80\u5355\u6BD4\u521B\u5EFA\u4E00\u4E2A\u7B80\u5355\u7684\u8BBE\u8BA1\u66F4\u5BB9\u6613\uFF0C\u4F46\u5F53\u4F60\u53EF\u4EE5\u8FA8\u522B\u51FA\u4E00\u4E2A\u7CFB\u7EDF\u592A\u590D\u6742\uFF0C\u4F60\u7684\u8BBE\u8BA1\u54F2\u5B66\u5C31\u53EF\u4EE5\u5728\u8FD9\u79CD\u80FD\u529B\u7684\u6307\u5F15\u4E0B\u8D8B\u5411\u7B80\u5355\u3002\u5982\u679C\u4E00\u4E2A\u8BBE\u8BA1\u770B\u8D77\u6765\u5F88\u590D\u6742\uFF0C\u5C1D\u8BD5\u4E00\u4E2A\u4E0D\u540C\u7684\u65B9\u6CD5\u5E76\u770B\u770B\u8FD9\u662F\u5426\u7B80\u5355\u70B9\u3002\u968F\u7740\u65F6\u95F4\u7684\u63A8\u79FB\uFF0C\u4F60\u4F1A\u5BDF\u89C9\u5230\u67D0\u4E9B\u6280\u672F\u4F1A\u4F7F\u8BBE\u8BA1\u66F4\u7B80\u5355\uFF0C\u800C\u5176\u4ED6\u7684\u4E0E\u590D\u6742\u5EA6\u76F8\u5173\u3002\u8FD9\u5C06\u4F7F\u4F60\u80FD\u591F\u66F4\u5FEB\u901F\u5730\u505A\u66F4\u7B80\u5355\u7684\u8BBE\u8BA1\u3002</p><p>\u672C\u7AE0\u8FD8\u5217\u51FA\u4E86\u4E00\u4E9B\u57FA\u672C\u5047\u8BBE\uFF0C\u4E3A\u672C\u4E66\u7684\u5176\u4F59\u90E8\u5206\u63D0\u4F9B\u57FA\u7840\u3002\u540E\u9762\u7684\u7AE0\u8282\u5C06\u672C\u7AE0\u7684\u6750\u6599\u4F5C\u4E3A\u5047\u8BBE\u4E8B\u5B9E\uFF0C\u5E76\u7528\u5176\u6765\u8BBA\u8BC1\u5404\u79CD\u6539\u8FDB\u548C\u63A8\u8BBA\u3002</p><h2 id="_2-1-\u590D\u6742\u5EA6\u7684\u5B9A\u4E49" tabindex="-1">2.1 \u590D\u6742\u5EA6\u7684\u5B9A\u4E49 <a class="header-anchor" href="#_2-1-\u590D\u6742\u5EA6\u7684\u5B9A\u4E49" aria-hidden="true">#</a></h2><p>\u51FA\u4E8E\u672C\u4E66\u7684\u76EE\u7684\uFF0C\u6211\u4EE5\u5B9E\u7528\u7684\u65B9\u5F0F\u5B9A\u4E49\u201C\u590D\u6742\u5EA6\u201D\u3002<strong>\u590D\u6742\u5EA6\u662F\u4E0E\u8F6F\u4EF6\u7CFB\u7EDF\u7ED3\u6784\u76F8\u5173\u4F7F\u5176\u96BE\u4EE5\u7406\u89E3\u548C\u4FEE\u6539\u7684\u4EFB\u4F55\u4E1C\u897F</strong>\u3002\u590D\u6742\u5EA6\u53EF\u4EE5\u6709\u591A\u79CD\u5F62\u5F0F\u3002\u4F8B\u5982\uFF0C\u5B83\u53EF\u80FD\u662F\u5F88\u96BE\u7406\u89E3\u4E00\u6BB5\u4EE3\u7801\u662F\u5982\u4F55\u8FD0\u8F6C\u7684\uFF1B\u53EF\u80FD\u662F\u505A\u4E86\u5927\u91CF\u7684\u52AA\u529B\u624D\u5B9E\u73B0\u4E00\u4E2A\u5C0F\u5C0F\u5730\u6539\u8FDB\uFF1B\u6216\u8005\u53EF\u80FD\u662F\u4E0D\u6E05\u695A\u4FEE\u6539\u7CFB\u7EDF\u7684\u54EA\u90E8\u5206\u624D\u80FD\u83B7\u5F97\u6539\u8FDB\uFF1B\u53EF\u80FD\u662F\u5F88\u96BE\u4E0D\u5F15\u5165\u5176\u4ED6\u95EE\u9898\u7684\u60C5\u51B5\u4E0B\u4FEE\u590D\u4E00\u4E2A\u7F3A\u9677\u3002\u5982\u679C\u4E00\u4E2A\u7CFB\u7EDF\u5F88\u96BE\u7406\u89E3\u548C\u4FEE\u6539\uFF0C\u90A3\u4E48\u5B83\u662F\u590D\u6742\u7684\uFF1B\u5982\u679C\u5B83\u5F88\u5BB9\u6613\u7406\u89E3\u548C\u4FEE\u6539\uFF0C\u90A3\u4E48\u5B83\u662F\u7B80\u5355\u7684\u3002</p><p>\u4F60\u4E5F\u53EF\u4EE5\u4ECE\u6210\u672C\u4E0E\u6536\u76CA\u7684\u89D2\u5EA6\u6765\u601D\u8003\u590D\u6742\u5EA6\u3002\u5728\u4E00\u4E2A\u590D\u6742\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u5373\u4F7F\u5F88\u5C0F\u7684\u6539\u8FDB\u4E5F\u9700\u8981\u5F88\u5927\u7684\u5DE5\u4F5C\u91CF\u3002\u5728\u4E00\u4E2A\u7B80\u5355\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u53EF\u4EE5\u8F83\u5C11\u7684\u6295\u5165\u6765\u5B9E\u73B0\u8F83\u5927\u7684\u6539\u8FDB\u3002</p><p>\u590D\u6742\u5EA6\u662F\u7A0B\u5E8F\u5458\u5728\u52AA\u529B\u5B9E\u73B0\u7279\u5B9A\u76EE\u6807\u65F6\u5728\u67D0\u4E00\u7279\u5B9A\u70B9\u7684\u611F\u53D7\u3002\u5B83\u4E0D\u4E00\u5B9A\u4E0E\u7CFB\u7EDF\u7684\u6574\u4F53\u5927\u5C0F\u6216\u529F\u80FD\u6027\u6709\u5173\u3002\u4EBA\u4EEC\u7ECF\u5E38\u7528\u201C\u590D\u6742\u201D\u8FD9\u4E2A\u8BCD\u6765\u63CF\u8FF0\u5177\u6709\u590D\u6742\u7279\u6027\u7684\u5927\u578B\u7CFB\u7EDF\uFF0C\u4F46\u5982\u679C\u8FD9\u6837\u7684\u7CFB\u7EDF\u5F88\u6613\u5BF9\u5176\u5DE5\u4F5C\uFF0C\u90A3\u4E48\u5C31\u672C\u4E66\u800C\u8A00\uFF0C\u5B83\u5E76\u4E0D\u662F\u590D\u6742\u3002\u5F53\u7136\uFF0C\u51E0\u4E4E\u6240\u6709\u5927\u578B\u4E14\u590D\u6742\u7684\u8F6F\u4EF6\u7CFB\u7EDF\u5B9E\u9645\u4E0A\u5F88\u96BE\u5BF9\u5176\u5DE5\u4F5C\uFF0C\u6240\u4EE5\u5B83\u4EEC\u4E5F\u7B26\u5408\u6211\u5BF9\u590D\u6742\u5EA6\u7684\u5B9A\u4E49\uFF0C\u4F46\u4E0D\u4E00\u5B9A\u662F\u8FD9\u6837\u3002\u4E00\u4E2A\u5C0F\u800C\u57FA\u672C\u7684\u7CFB\u7EDF\u4E5F\u53EF\u80FD\u975E\u5E38\u7684\u590D\u6742\u3002</p><p>\u590D\u6742\u5EA6\u7531\u6700\u5E38\u89C1\u7684\u6D3B\u52A8\u51B3\u5B9A\u3002\u5982\u679C\u4E00\u4E2A\u7CFB\u7EDF\u6709\u4E00\u4E9B\u975E\u5E38\u590D\u6742\u7684\u90E8\u5206\uFF0C\u4F46\u662F\u8FD9\u4E9B\u90E8\u5206\u51E0\u4E4E\u4E0D\u9700\u8981\u63A5\u89E6\uFF0C\u90A3\u4E48\u5B83\u4EEC\u5BF9\u7CFB\u7EDF\u7684\u6574\u4F53\u590D\u6742\u5EA6\u6CA1\u6709\u592A\u5927\u5F71\u54CD\u3002\u7528\u7B80\u7565\u7684\u6570\u5B66\u65B9\u5F0F\u6765\u63CF\u8FF0\uFF1A</p><section><eqn><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4361em;vertical-align:-1.3861em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">\u2211</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.3861em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>\u4E00\u4E2A\u7CFB\u7EDF\u7684\u6574\u4F53\u590D\u6742\u5EA6\uFF08 <eq><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></eq> \uFF09\u662F\u7531\u6BCF\u4E2A\u90E8\u5206p\u7684\u590D\u6742\u5EA6\uFF08 <eq><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> \uFF09\u4E0E\u5F00\u53D1\u4EBA\u5458\u5728\u8BE5\u90E8\u5206\u82B1\u8D39\u65F6\u95F4\u7684\u5206\u6570\uFF08 <eq><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> \uFF09\u52A0\u6743\u3002\u9694\u79BB\u590D\u6742\u5EA6\u5B8C\u5168\u4E0D\u611F\u77E5\u51E0\u4E4E\u548C\u5B8C\u5168\u6E05\u9664\u590D\u6742\u5EA6\u4E00\u6837\u597D\u3002</p><p>\u590D\u6742\u5EA6\u5BF9\u4E8E\u9605\u8BFB\u8005\u6BD4\u7F16\u5199\u8005\u66F4\u663E\u800C\u6613\u89C1\u3002\u5982\u679C\u4F60\u5199\u4E86\u4E00\u6BB5\u5BF9\u4F60\u6765\u8BF4\u5F88\u7B80\u5355\u7684\u4EE3\u7801\uFF0C\u4F46\u5176\u4ED6\u4EBA\u8BA4\u4E3A\u5B83\u5F88\u590D\u6742\uFF0C\u90A3\u4E48\u5B83\u5C31\u5F88\u590D\u6742\u3002\u5982\u679C\u4F60\u53D1\u73B0\u81EA\u5DF1\u5904\u4E8E\u8FD9\u6837\u7684\u60C5\u5F62\u4E0B\uFF0C\u503C\u5F97\u8FFD\u95EE\u5176\u4ED6\u5F00\u53D1\u4EBA\u5458\u4EE5\u627E\u51FA\u4EE3\u7801\u4ED6\u4EEC\u770B\u8D77\u6765\u590D\u6742\u7684\u539F\u56E0\uFF1B\u4ECE\u83AB\u8877\u4E00\u662F\u4E2D\u6216\u8BB8\u53EF\u4EE5\u5B66\u4E60\u5230\u4E00\u4E9B\u6709\u8DA3\u7684\u7ECF\u9A8C\u3002\u4F5C\u4E3A\u5F00\u53D1\u4EBA\u5458\uFF0C\u4F60\u7684\u5DE5\u4F5C\u4E0D\u4EC5\u4EC5\u662F\u521B\u9020\u81EA\u5DF1\u53EF\u4EE5\u8F7B\u677E\u4F7F\u7528\u7684\u4EE3\u7801\uFF0C\u800C\u662F\u521B\u9020\u5176\u4ED6\u4EBA\u4E5F\u53EF\u4EE5\u8F7B\u677E\u4F7F\u7528\u7684\u4EE3\u7801\u3002</p><h2 id="_2-2-\u590D\u6742\u5EA6\u8868\u5F81" tabindex="-1">2.2 \u590D\u6742\u5EA6\u8868\u5F81 <a class="header-anchor" href="#_2-2-\u590D\u6742\u5EA6\u8868\u5F81" aria-hidden="true">#</a></h2><p>\u590D\u6742\u5EA6\u901A\u8FC7\u4E09\u79CD\u4E00\u822C\u5F62\u5F0F\u8868\u73B0\u51FA\u6765\uFF0C\u4E0B\u9762\u7684\u6BB5\u843D\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\u3002\u6BCF\u4E00\u79CD\u8868\u73B0\u5F62\u5F0F\u90FD\u4F7F\u5F00\u53D1\u4EFB\u52A1\u66F4\u96BE\u4EE5\u6267\u884C\u3002</p><p><strong>\u53D8\u66F4\u653E\u5927</strong>\uFF1A\u590D\u6742\u5EA6\u7684\u7B2C\u4E00\u4E2A\u8868\u5F81\u662F\uFF0C\u770B\u4F3C\u7B80\u5355\u7684\u53D8\u66F4\u5374\u9700\u8981\u8BB8\u591A\u5904\u4EE3\u7801\u4FEE\u6539\u3002\u4F8B\u5982\uFF0C\u8BBE\u60F3\u4E00\u4E2A\u7F51\u7AD9\u5305\u542B\u4E00\u4E9B\u9875\u9762\uFF0C\u6BCF\u4E2A\u9875\u9762\u90FD\u663E\u793A\u4E00\u4E2A\u6709\u80CC\u666F\u8272\u7684\u6A2A\u5E45\u3002\u5728\u8BB8\u591A\u65E9\u671F\u7684\u7F51\u7AD9\u4E2D\uFF0C\u989C\u8272\u88AB\u660E\u786E\u5B9A\u4E49\u5728\u6BCF\u4E2A\u9875\u9762\u4E0A\uFF0C\u5982\u56FE2.1\uFF08a\uFF09\u6240\u793A\u3002\u4E3A\u4E86\u6539\u53D8\u8FD9\u6837\u4E00\u4E2A\u7F51\u7AD9\u7684\u80CC\u666F\uFF0C\u5F00\u53D1\u4EBA\u5458\u4E0D\u5F97\u4E0D\u624B\u52A8\u4FEE\u6539\u6BCF\u4E2A\u73B0\u6709\u7684\u9875\u9762\uFF1B\u8FD9\u5BF9\u4E8E\u4E00\u4E2A\u6709\u6570\u5343\u4E2A\u9875\u9762\u7684\u5927\u578B\u7F51\u7AD9\u6765\u8BF4\u51E0\u4E4E\u662F\u4E0D\u53EF\u80FD\u7684\u3002\u5E78\u597D\u73B0\u4EE3\u7F51\u7AD9\u4F7F\u7528\u4E86\u56FE2.1\uFF08b\uFF09\u4E2D\u7684\u65B9\u6CD5\uFF0C\u6A2A\u5E45\u989C\u8272\u53EA\u5728\u4E2D\u5FC3\u4F4D\u7F6E\u5B9A\u4E49\u4E00\u6B21\uFF0C\u6240\u6709\u7684\u72EC\u7ACB\u9875\u9762\u90FD\u5F15\u7528\u8FD9\u4E2A\u5171\u4EAB\u503C\u3002\u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\uFF0C\u53EF\u4EE5\u901A\u8FC7\u4E00\u6B21\u4FEE\u6539\u6765\u66F4\u6539\u6574\u4E2A\u7F51\u7AD9\u7684\u6A2A\u5E45\u989C\u8272\u3002\u4F18\u79C0\u8BBE\u8BA1\u7684\u76EE\u6807\u4E4B\u4E00\u662F\u51CF\u5C11\u53D7\u8BBE\u8BA1\u51B3\u7B56\u5F71\u54CD\u7684\u4EE3\u7801\u91CF\uFF0C\u8FD9\u6837\u8BBE\u8BA1\u53D8\u66F4\u4E0D\u9700\u8981\u5F88\u591A\u4EE3\u7801\u4FEE\u6539\u3002</p><p><strong>\u8BA4\u77E5\u8D1F\u8377</strong>: \u590D\u6742\u7684\u7B2C\u4E8C\u4E2A\u8868\u5F81\u662F\u8BA4\u77E5\u8D1F\u8377\uFF0C\u8FD9\u662F\u6307\u5F00\u53D1\u4EBA\u5458\u4E3A\u5B8C\u6210\u4E00\u4E2A\u4EFB\u52A1\u9700\u8981\u77E5\u6653\u7684\u4FE1\u606F\u91CF\u3002 A higher cognitive load means that developers have to spend more time learning the required information, and there is a greater risk of bugs because they have missed something important. For example, suppose a function in C allocates memory, returns a pointer to that memory, and assumes that the caller will free the memory. This adds to the cognitive load of developers using the function; if a developer fails to free the memory, there will be a memory leak. If the system can be restructured so that the caller doesn\u2019t need to worry about freeing the memory (the same module that allocates the memory also takes responsibility for freeing it), it will reduce the cognitive load. Cognitive load arises in many ways, such as APIs with many methods, global variables, inconsistencies, and dependencies between modules.</p><p>System designers sometimes assume that complexity can be measured by lines of code. They assume that if one implementation is shorter than another, then it must be simpler; if it only takes a few lines of code to make a change, then the change must be easy. However, this view ignores the costs associated with cognitive load. I have seen frameworks that allowed applications to be written with only a few lines of code, but it was extremely difficult to figure out what those lines were. <strong>Sometimes an approach that requires more lines of code is actually simpler, because it reduces cognitive load.</strong></p><p><img src="'+n+'" alt=""></p><p>Figure 2.1: Each page in a Web site displays a colored banner. In (a) the background color for the banner is specified explicitly in each page. In (b) a shared variable holds the background color and each page references that variable. In (c) some pages display an additional color for emphasis, which is a darker shade of the banner background color; if the background color changes, the emphasis color must also change.</p><p><strong>Unknown unknowns</strong>: The third symptom of complexity is that it is not obvious which pieces of code must be modified to complete a task, or what information a developer must have to carry out the task successfully. Figure 2.1(c) illustrates this problem. The Web site uses a central variable to determine the banner background color, so it appears to be easy to change. However, a few Web pages use a darker shade of the background color for emphasis, and that darker color is specified explicitly in the individual pages. If the background color changes, then the the emphasis color must change to match. Unfortunately, developers are unlikely to realize this, so they may change the central bannerBg variable without updating the emphasis color. Even if a developer is aware of the problem, it won\u2019t be obvious which pages use the emphasis color, so the developer may have to search every page in the Web site.</p><p>Of the three manifestations of complexity, unknown unknowns are the worst. An unknown unknown means that there is something you need to know, but there is no way for you to find out what it is, or even whether there is an issue. You won\u2019t find out about it until bugs appear after you make a change. Change amplification is annoying, but as long as it is clear which code needs to be modified, the system will work once the change has been completed. Similarly, a high cognitive load will increase the cost of a change, but if it is clear which information to read, the change is still likely to be correct. With unknown unknowns, it is unclear what to do or whether a proposed solution will even work. The only way to be certain is to read every line of code in the system, which is impossible for systems of any size. Even this may not be sufficient, because a change may depend on a subtle design decision that was never documented.</p><p>One of the most important goals of good design is for a system to be obvious. This is the opposite of high cognitive load and unknown unknowns. In an obvious system, a developer can quickly understand how the existing code works and what is required to make a change. An obvious system is one where a developer can make a quick guess about what to do, without thinking very hard, and yet be confident that the guess is correct. Chapter 18 discusses techniques for making code more obvious.</p><h2 id="_2-3-causes-of-complexity" tabindex="-1">2.3 Causes of complexity <a class="header-anchor" href="#_2-3-causes-of-complexity" aria-hidden="true">#</a></h2><p>Now that you know the high-level symptoms of complexity and why complexity makes software development difficult, the next step is to understand what causes complexity, so that we can design systems to avoid the problems. Complexity is caused by two things: dependencies and obscurity. This section discusses these factors at a high level; subsequent chapters will discuss how they relate to lower-level design decisions.</p><p>For the purposes of this book, a dependency exists when a given piece of code cannot be understood and modified in isolation; the code relates in some way to other code, and the other code must be considered and/or modified if the given code is changed. In the Web site example of Figure 2.1(a), the background color creates dependencies between all of the pages. All of the pages need to have the same background, so if the background is changed for one page, then it must be changed for all of them. Another example of dependencies occurs in network protocols. Typically there is separate code for the sender and receiver for the protocol, but they must each conform to the protocol; changing the code for the sender almost always requires corresponding changes at the receiver, and vice versa. The signature of a method creates a dependency between the implementation of that method and the code that invokes it: if a new parameter is added to a method, all of the invocations of that method must be modified to specify that parameter.</p><p>Dependencies are a fundamental part of software and can\u2019t be completely eliminated. In fact, we intentionally introduce dependencies as part of the software design process. Every time you write a new class you create dependencies around the API for that class. However, one of the goals of software design is to reduce the number of dependencies and to make the dependencies that remain as simple and obvious as possible.</p><p>Consider the Web site example. In the old Web site with the background specified separately on each page, all of the Web pages were dependent on each other. The new Web site fixed this problem by specifying the background color in a central place and providing an API that individual pages use to retrieve that color when they are rendered. The new Web site eliminated the dependency between the pages, but it created a new dependency around the API for retrieving the background color. Fortunately, the new dependency is more obvious: it is clear that each individual Web page depends on the bannerBg color, and a developer can easily find all the places where the variable is used by searching for its name. Furthermore, compilers help to manage API dependencies: if the name of the shared variable changes, compilation errors will occur in any code that still uses the old name. The new Web site replaced a nonobvious and difficult-to-manage dependency with a simpler and more obvious one.</p><p>The second cause of complexity is obscurity. Obscurity occurs when important information is not obvious. A simple example is a variable name that is so generic that it doesn\u2019t carry much useful information (e.g., time). Or, the documentation for a variable might not specify its units, so the only way to find out is to scan code for places where the variable is used. Obscurity is often associated with dependencies, where it is not obvious that a dependency exists. For example, if a new error status is added to a system, it may be necessary to add an entry to a table holding string messages for each status, but the existence of the message table might not be obvious to a programmer looking at the status declaration. Inconsistency is also a major contributor to obscurity: if the same variable name is used for two different purposes, it won\u2019t be obvious to developer which of these purposes a particular variable serves.</p><p>In many cases, obscurity comes about because of inadequate documentation; Chapter 13 deals with this topic. However, obscurity is also a design issue. If a system has a clean and obvious design, then it will need less documentation. The need for extensive documentation is often a red flag that the design isn\u2019t quite right. The best way to reduce obscurity is by simplifying the system design.</p><p>Together, dependencies and obscurity account for the three manifestations of complexity described in Section 2.2. Dependencies lead to change amplification and a high cognitive load. Obscurity creates unknown unknowns, and also contributes to cognitive load. If we can find design techniques that minimize dependencies and obscurity, then we can reduce the complexity of software.</p><h2 id="_2-4-complexity-is-incremental" tabindex="-1">2.4 Complexity is incremental <a class="header-anchor" href="#_2-4-complexity-is-incremental" aria-hidden="true">#</a></h2><p>Complexity isn\u2019t caused by a single catastrophic error; it accumulates in lots of small chunks. A single dependency or obscurity, by itself, is unlikely to affect significantly the maintainability of a software system. Complexity comes about because hundreds or thousands of small dependencies and obscurities build up over time. Eventually, there are so many of these small issues that every possible change to the system is affected by several of them.</p><p>The incremental nature of complexity makes it hard to control. It\u2019s easy to convince yourself that a little bit of complexity introduced by your current change is no big deal. However, if every developer takes this approach for every change, complexity accumulates rapidly. Once complexity has accumulated, it is hard to eliminate, since fixing a single dependency or obscurity will not, by itself, make a big difference. In order to slow the growth of complexity, you must adopt a \u201Czero tolerance\u201D philosophy, as discussed in Chapter 3.</p><h2 id="_2-5-conclusion" tabindex="-1">2.5 Conclusion <a class="header-anchor" href="#_2-5-conclusion" aria-hidden="true">#</a></h2><p>Complexity comes from an accumulation of dependencies and obscurities. As complexity increases, it leads to change amplification, a high cognitive load, and unknown unknowns. As a result, it takes more code modifications to implement each new feature. In addition, developers spend more time acquiring enough information to make the change safely and, in the worst case, they can\u2019t even find all the information they need. The bottom line is that complexity makes it difficult and risky to modify an existing code base.</p>',35),r=[o];function l(c,p,h,d,m,u){return a(),s("div",null,r)}const f=e(i,[["render",l]]);export{y as __pageData,f as default};
